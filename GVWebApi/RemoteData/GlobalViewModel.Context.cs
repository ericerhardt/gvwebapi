//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GVWebapi.RemoteData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GlobalViewEntities : DbContext
    {
        public GlobalViewEntities()
            : base("name=GlobalViewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssetReplacement> AssetReplacements { get; set; }
        public virtual DbSet<ContactClient> ContactClients { get; set; }
        public virtual DbSet<FprContact> FprContacts { get; set; }
        public virtual DbSet<EquipmentManager> EquipmentManagers { get; set; }
        public virtual DbSet<EquipmentManagerList> EquipmentManagerLists { get; set; }
        public virtual DbSet<GlobalViewUser> GlobalViewUsers { get; set; }
        public virtual DbSet<ClientContact> ClientContacts { get; set; }
        public virtual DbSet<CyclePeriod> CyclePeriods { get; set; }
        public virtual DbSet<CyclePeriodSchedule> CyclePeriodSchedules { get; set; }
        public virtual DbSet<CycleReconciliationService> CycleReconciliationServices { get; set; }
        public virtual DbSet<Cycle> Cycles { get; set; }
        public virtual DbSet<EasyLink> EasyLinks { get; set; }
        public virtual DbSet<EasyLinkChildMatch> EasyLinkChildMatches { get; set; }
        public virtual DbSet<EasyLinkItem> EasyLinkItems { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<ScheduleService> ScheduleServices { get; set; }
        public virtual DbSet<RevisionData> RevisionDatas { get; set; }
        public virtual DbSet<RevisionNote> RevisionNotes { get; set; }
        public virtual DbSet<RevisionBaseExpense> RevisionBaseExpenses { get; set; }
        public virtual DbSet<RevisionMeterGroup> RevisionMeterGroups { get; set; }
        public virtual DbSet<CostCenterService> CostCenterServices { get; set; }
        public virtual DbSet<QuarterlyRollover> QuarterlyRollovers { get; set; }
        public virtual DbSet<RevisionDataView> RevisionDataViews { get; set; }
        public virtual DbSet<ClientSetting> ClientSettings { get; set; }
        public virtual DbSet<EasylinkData> EasylinkDatas { get; set; }
        public virtual DbSet<EasylinkImportHistory> EasylinkImportHistories { get; set; }
        public virtual DbSet<EasyLinkMapping> EasyLinkMappings { get; set; }
        public virtual DbSet<EasylinkByClient> EasylinkByClients { get; set; }
        public virtual DbSet<CostAvoidance> CostAvoidances { get; set; }
        public virtual DbSet<EasyLinkPagesByClient> EasyLinkPagesByClients { get; set; }
        public virtual DbSet<EasylinkPagesByUser> EasylinkPagesByUsers { get; set; }
        public virtual DbSet<InvoicedEquipmentHistory> InvoicedEquipmentHistories { get; set; }
        public virtual DbSet<CostAllocationMeterGroup> CostAllocationMeterGroups { get; set; }
        public virtual DbSet<CostAllocationSetting> CostAllocationSettings { get; set; }
        public virtual DbSet<ScheduleCostCenter> ScheduleCostCenters { get; set; }
        public virtual DbSet<ScheduleDevice> ScheduleDevices { get; set; }
    
        public virtual ObjectResult<EasylinkReportByDate_Result> EasylinkReportByDate(Nullable<int> clientId, string startDate, string endDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EasylinkReportByDate_Result>("EasylinkReportByDate", clientIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<EasyLinkByClientTotals_Result> EasyLinkByClientTotals(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EasyLinkByClientTotals_Result>("EasyLinkByClientTotals", clientIDParameter);
        }
    
        public virtual ObjectResult<EasyLinkByClientDetail_Result> EasyLinkByClientDetail(Nullable<int> clientID, string period)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EasyLinkByClientDetail_Result>("EasyLinkByClientDetail", clientIDParameter, periodParameter);
        }
    }
}
